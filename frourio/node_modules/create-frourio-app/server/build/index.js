var kn=Object.create;var de=Object.defineProperty;var xn=Object.getOwnPropertyDescriptor;var Pn=Object.getOwnPropertyNames;var Tn=Object.getPrototypeOf,An=Object.prototype.hasOwnProperty;var i=(e,t)=>de(e,"name",{value:t,configurable:!0});var v=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var Sn=(e,t,n,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of Pn(t))!An.call(e,s)&&s!==n&&de(e,s,{get:()=>t[s],enumerable:!(r=xn(t,s))||r.enumerable});return e};var f=(e,t,n)=>(n=e!=null?kn(Tn(e)):{},Sn(t||!e||!e.__esModule?de(n,"default",{value:e,enumerable:!0}):n,e));var q=v(H=>{"use strict";var M=H&&H.__assign||function(){return M=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])}return e},M.apply(this,arguments)},Rn=H&&H.__read||function(e,t){var n=typeof Symbol=="function"&&e[Symbol.iterator];if(!n)return e;var r=n.call(e),s,o=[],a;try{for(;(t===void 0||t-- >0)&&!(s=r.next()).done;)o.push(s.value)}catch(l){a={error:l}}finally{try{s&&!s.done&&(n=r.return)&&n.call(r)}finally{if(a)throw a.error}}return o},Cn=H&&H.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(Rn(arguments[t]));return e};Object.defineProperty(H,"__esModule",{value:!0});H.depend=void 0;var In=i(function(e,t){var n=i(function(){for(var r=[],s=0;s<arguments.length;s++)r[s]=arguments[s];return t.apply(void 0,Cn([e],r))},"fn");return n.inject=function(r){return typeof r=="function"?H.depend(M(M({},e),r(e)),t):H.depend(M(M({},e),r),t)},n},"depend");H.depend=In});var Ge=v((xr,Mn)=>{Mn.exports={name:"create-frourio-app-pretense",version:"0.1.0",private:!0,scripts:{"upgrade-frourio":"npx ncu frourio frourio-express aspida @aspida/axios @aspida/fetch @aspida/node-fetch @aspida/react-query @aspida/swr pathpida -u"},dependencies:{"@aspida/axios":"^1.10.3","@aspida/fetch":"^1.10.3","@aspida/node-fetch":"^1.10.3","@aspida/react-query":"^1.10.3","@aspida/swr":"^1.10.3","@babel/core":"^7.17.0","@babel/plugin-syntax-dynamic-import":"^7.8.3","@babel/plugin-transform-runtime":"^7.17.0","@babel/preset-env":"^7.16.11","@babel/runtime":"^7.17.0","@commitlint/cli":"^16.1.0","@commitlint/config-conventional":"^16.0.0","@fastify/cors":"^7.0.0","@fastify/helmet":"^8.0.0","@fastify/jwt":"^5.0.1","@fastify/multipart":"^6.0.0","@fastify/static":"^5.0.2","@nuxt/types":"^2.15.8","@nuxt/typescript-build":"^2.1.0","@nuxt/typescript-runtime":"^2.1.0","@nuxtjs/axios":"^5.13.6","@nuxtjs/eslint-config":"^8.0.0","@nuxtjs/eslint-config-typescript":"^8.0.0","@nuxtjs/eslint-module":"^3.0.2","@nuxtjs/stylelint-module":"^4.1.0","@prisma/client":"^3.9.1","@rollup/plugin-babel":"^5.3.0","@rollup/plugin-commonjs":"^21.0.1","@rollup/plugin-json":"^4.1.0","@rollup/plugin-node-resolve":"^13.1.3","@rollup/plugin-replace":"^3.0.1","@rollup/plugin-typescript":"^8.3.0","@rollup/plugin-url":"^6.1.0","@testing-library/react":"^12.1.2","@testing-library/vue":"^5.8.2","@tsconfig/svelte":"^3.0.0","@types/aws-lambda":"^8.10.92","@types/busboy":"^1.3.0","@types/compression":"^1.7.2","@types/cors":"^2.8.12","@types/express-jwt":"^6.0.4","@types/jest":"^27.4.0","@types/jsonwebtoken":"^8.5.8","@types/multer":"^1.4.7","@types/node":"^17.0.15","@types/node-fetch":"^2.5.10","@types/react":"^18.0.15","@types/react-dom":"^18.0.6","@typescript-eslint/eslint-plugin":"^5.10.2","@typescript-eslint/parser":"^5.10.2","@vendia/serverless-express":"^4.5.3","@vue/test-utils":"^1.3.0",aspida:"^1.10.3",axios:"^0.25.0","babel-core":"7.0.0-bridge.0","babel-eslint":"^10.1.0","babel-jest":"^27.5.0","class-transformer":"^0.5.1","class-validator":"^0.13.2",compression:"^1.7.4","core-js":"^3.21.0",cors:"^2.8.5","cross-env":"^7.0.3",dotenv:"^16.0.0",esbuild:"^0.14.19","esbuild-node-externals":"^1.4.1",eslint:"^7.24.0","eslint-config-prettier":"^8.3.0","eslint-config-standard":"^16.0.3","eslint-plugin-import":"^2.25.4","eslint-plugin-jest":"^26.1.0","eslint-plugin-node":"^11.1.0","eslint-plugin-nuxt":"^3.1.0","eslint-plugin-promise":"^6.0.0","eslint-plugin-react":"^7.28.0",express:"^4.17.2","express-jwt":"^6.1.0",fastify:"^3.27.1",frourio:"^0.29.0","frourio-express":"^0.28.0",helmet:"^5.0.2",husky:"^7.0.4","identity-obj-proxy":"^3.0.0",jest:"^27.5.0","lint-staged":"^12.3.3",multer:"^1.4.4",mysql2:"^2.3.3",next:"^12.2.3","node-dev":"^7.1.0","node-fetch":"^2.6.1","nodemon-webpack-plugin":"^4.7.1","npm-run-all":"^4.1.5",nuxt:"^2.15.8",pathpida:"^0.18.1",pg:"^8.7.3",pm2:"^5.1.2",polka:"next","postcss-html":"^1.3.0",prettier:"^2.5.1",prisma:"^3.9.1",react:"^18.2.0","react-dom":"^18.2.0","react-query":"^3.34.14","reflect-metadata":"^0.1.13",rollup:"^2.67.1","rollup-plugin-svelte":"^7.1.0","rollup-plugin-terser":"^7.0.2",sapper:"^0.29.3",serve:"^13.0.2",sirv:"^2.0.2",stylelint:"^14.3.0","stylelint-config-prettier":"^9.0.3","stylelint-config-standard":"^24.0.0",svelte:"^3.46.4","svelte-check":"^2.4.2","svelte-loader":"^3.1.2","svelte-preprocess":"^4.10.2",swr:"^1.2.1","ts-jest":"^27.1.3","ts-loader":"~8.2.0","ts-node":"^10.4.0","tsconfig-paths-webpack-plugin":"^3.5.2",tslib:"^2.3.1",typeorm:"^0.2.41",typeormer:"^0.1.3",typescript:"~4.5","vue-jest":"^3.0.7","wait-on":"^6.0.1",webpack:"^5.68.0","webpack-cli":"^4.9.2","webpack-node-externals":"^3.0.0"}}});var tt=v((Dr,et)=>{"use strict";et.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}});var ye=v((_r,rt)=>{var B=tt(),nt={};for(let e of Object.keys(B))nt[B[e]]=e;var d={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};rt.exports=d;for(let e of Object.keys(d)){if(!("channels"in d[e]))throw new Error("missing channels property: "+e);if(!("labels"in d[e]))throw new Error("missing channel labels property: "+e);if(d[e].labels.length!==d[e].channels)throw new Error("channel and label counts mismatch: "+e);let{channels:t,labels:n}=d[e];delete d[e].channels,delete d[e].labels,Object.defineProperty(d[e],"channels",{value:t}),Object.defineProperty(d[e],"labels",{value:n})}d.rgb.hsl=function(e){let t=e[0]/255,n=e[1]/255,r=e[2]/255,s=Math.min(t,n,r),o=Math.max(t,n,r),a=o-s,l,c;o===s?l=0:t===o?l=(n-r)/a:n===o?l=2+(r-t)/a:r===o&&(l=4+(t-n)/a),l=Math.min(l*60,360),l<0&&(l+=360);let u=(s+o)/2;return o===s?c=0:u<=.5?c=a/(o+s):c=a/(2-o-s),[l,c*100,u*100]};d.rgb.hsv=function(e){let t,n,r,s,o,a=e[0]/255,l=e[1]/255,c=e[2]/255,u=Math.max(a,l,c),y=u-Math.min(a,l,c),p=i(function(g){return(u-g)/6/y+1/2},"diffc");return y===0?(s=0,o=0):(o=y/u,t=p(a),n=p(l),r=p(c),a===u?s=r-n:l===u?s=1/3+t-r:c===u&&(s=2/3+n-t),s<0?s+=1:s>1&&(s-=1)),[s*360,o*100,u*100]};d.rgb.hwb=function(e){let t=e[0],n=e[1],r=e[2],s=d.rgb.hsl(e)[0],o=1/255*Math.min(t,Math.min(n,r));return r=1-1/255*Math.max(t,Math.max(n,r)),[s,o*100,r*100]};d.rgb.cmyk=function(e){let t=e[0]/255,n=e[1]/255,r=e[2]/255,s=Math.min(1-t,1-n,1-r),o=(1-t-s)/(1-s)||0,a=(1-n-s)/(1-s)||0,l=(1-r-s)/(1-s)||0;return[o*100,a*100,l*100,s*100]};function On(e,t){return(e[0]-t[0])**2+(e[1]-t[1])**2+(e[2]-t[2])**2}i(On,"comparativeDistance");d.rgb.keyword=function(e){let t=nt[e];if(t)return t;let n=1/0,r;for(let s of Object.keys(B)){let o=B[s],a=On(e,o);a<n&&(n=a,r=s)}return r};d.keyword.rgb=function(e){return B[e]};d.rgb.xyz=function(e){let t=e[0]/255,n=e[1]/255,r=e[2]/255;t=t>.04045?((t+.055)/1.055)**2.4:t/12.92,n=n>.04045?((n+.055)/1.055)**2.4:n/12.92,r=r>.04045?((r+.055)/1.055)**2.4:r/12.92;let s=t*.4124+n*.3576+r*.1805,o=t*.2126+n*.7152+r*.0722,a=t*.0193+n*.1192+r*.9505;return[s*100,o*100,a*100]};d.rgb.lab=function(e){let t=d.rgb.xyz(e),n=t[0],r=t[1],s=t[2];n/=95.047,r/=100,s/=108.883,n=n>.008856?n**(1/3):7.787*n+16/116,r=r>.008856?r**(1/3):7.787*r+16/116,s=s>.008856?s**(1/3):7.787*s+16/116;let o=116*r-16,a=500*(n-r),l=200*(r-s);return[o,a,l]};d.hsl.rgb=function(e){let t=e[0]/360,n=e[1]/100,r=e[2]/100,s,o,a;if(n===0)return a=r*255,[a,a,a];r<.5?s=r*(1+n):s=r+n-r*n;let l=2*r-s,c=[0,0,0];for(let u=0;u<3;u++)o=t+1/3*-(u-1),o<0&&o++,o>1&&o--,6*o<1?a=l+(s-l)*6*o:2*o<1?a=s:3*o<2?a=l+(s-l)*(2/3-o)*6:a=l,c[u]=a*255;return c};d.hsl.hsv=function(e){let t=e[0],n=e[1]/100,r=e[2]/100,s=n,o=Math.max(r,.01);r*=2,n*=r<=1?r:2-r,s*=o<=1?o:2-o;let a=(r+n)/2,l=r===0?2*s/(o+s):2*n/(r+n);return[t,l*100,a*100]};d.hsv.rgb=function(e){let t=e[0]/60,n=e[1]/100,r=e[2]/100,s=Math.floor(t)%6,o=t-Math.floor(t),a=255*r*(1-n),l=255*r*(1-n*o),c=255*r*(1-n*(1-o));switch(r*=255,s){case 0:return[r,c,a];case 1:return[l,r,a];case 2:return[a,r,c];case 3:return[a,l,r];case 4:return[c,a,r];case 5:return[r,a,l]}};d.hsv.hsl=function(e){let t=e[0],n=e[1]/100,r=e[2]/100,s=Math.max(r,.01),o,a;a=(2-n)*r;let l=(2-n)*s;return o=n*s,o/=l<=1?l:2-l,o=o||0,a/=2,[t,o*100,a*100]};d.hwb.rgb=function(e){let t=e[0]/360,n=e[1]/100,r=e[2]/100,s=n+r,o;s>1&&(n/=s,r/=s);let a=Math.floor(6*t),l=1-r;o=6*t-a,(a&1)!==0&&(o=1-o);let c=n+o*(l-n),u,y,p;switch(a){default:case 6:case 0:u=l,y=c,p=n;break;case 1:u=c,y=l,p=n;break;case 2:u=n,y=l,p=c;break;case 3:u=n,y=c,p=l;break;case 4:u=c,y=n,p=l;break;case 5:u=l,y=n,p=c;break}return[u*255,y*255,p*255]};d.cmyk.rgb=function(e){let t=e[0]/100,n=e[1]/100,r=e[2]/100,s=e[3]/100,o=1-Math.min(1,t*(1-s)+s),a=1-Math.min(1,n*(1-s)+s),l=1-Math.min(1,r*(1-s)+s);return[o*255,a*255,l*255]};d.xyz.rgb=function(e){let t=e[0]/100,n=e[1]/100,r=e[2]/100,s,o,a;return s=t*3.2406+n*-1.5372+r*-.4986,o=t*-.9689+n*1.8758+r*.0415,a=t*.0557+n*-.204+r*1.057,s=s>.0031308?1.055*s**(1/2.4)-.055:s*12.92,o=o>.0031308?1.055*o**(1/2.4)-.055:o*12.92,a=a>.0031308?1.055*a**(1/2.4)-.055:a*12.92,s=Math.min(Math.max(0,s),1),o=Math.min(Math.max(0,o),1),a=Math.min(Math.max(0,a),1),[s*255,o*255,a*255]};d.xyz.lab=function(e){let t=e[0],n=e[1],r=e[2];t/=95.047,n/=100,r/=108.883,t=t>.008856?t**(1/3):7.787*t+16/116,n=n>.008856?n**(1/3):7.787*n+16/116,r=r>.008856?r**(1/3):7.787*r+16/116;let s=116*n-16,o=500*(t-n),a=200*(n-r);return[s,o,a]};d.lab.xyz=function(e){let t=e[0],n=e[1],r=e[2],s,o,a;o=(t+16)/116,s=n/500+o,a=o-r/200;let l=o**3,c=s**3,u=a**3;return o=l>.008856?l:(o-16/116)/7.787,s=c>.008856?c:(s-16/116)/7.787,a=u>.008856?u:(a-16/116)/7.787,s*=95.047,o*=100,a*=108.883,[s,o,a]};d.lab.lch=function(e){let t=e[0],n=e[1],r=e[2],s;s=Math.atan2(r,n)*360/2/Math.PI,s<0&&(s+=360);let a=Math.sqrt(n*n+r*r);return[t,a,s]};d.lch.lab=function(e){let t=e[0],n=e[1],s=e[2]/360*2*Math.PI,o=n*Math.cos(s),a=n*Math.sin(s);return[t,o,a]};d.rgb.ansi16=function(e,t=null){let[n,r,s]=e,o=t===null?d.rgb.hsv(e)[2]:t;if(o=Math.round(o/50),o===0)return 30;let a=30+(Math.round(s/255)<<2|Math.round(r/255)<<1|Math.round(n/255));return o===2&&(a+=60),a};d.hsv.ansi16=function(e){return d.rgb.ansi16(d.hsv.rgb(e),e[2])};d.rgb.ansi256=function(e){let t=e[0],n=e[1],r=e[2];return t===n&&n===r?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(n/255*5)+Math.round(r/255*5)};d.ansi16.rgb=function(e){let t=e%10;if(t===0||t===7)return e>50&&(t+=3.5),t=t/10.5*255,[t,t,t];let n=(~~(e>50)+1)*.5,r=(t&1)*n*255,s=(t>>1&1)*n*255,o=(t>>2&1)*n*255;return[r,s,o]};d.ansi256.rgb=function(e){if(e>=232){let o=(e-232)*10+8;return[o,o,o]}e-=16;let t,n=Math.floor(e/36)/5*255,r=Math.floor((t=e%36)/6)/5*255,s=t%6/5*255;return[n,r,s]};d.rgb.hex=function(e){let n=(((Math.round(e[0])&255)<<16)+((Math.round(e[1])&255)<<8)+(Math.round(e[2])&255)).toString(16).toUpperCase();return"000000".substring(n.length)+n};d.hex.rgb=function(e){let t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];let n=t[0];t[0].length===3&&(n=n.split("").map(l=>l+l).join(""));let r=parseInt(n,16),s=r>>16&255,o=r>>8&255,a=r&255;return[s,o,a]};d.rgb.hcg=function(e){let t=e[0]/255,n=e[1]/255,r=e[2]/255,s=Math.max(Math.max(t,n),r),o=Math.min(Math.min(t,n),r),a=s-o,l,c;return a<1?l=o/(1-a):l=0,a<=0?c=0:s===t?c=(n-r)/a%6:s===n?c=2+(r-t)/a:c=4+(t-n)/a,c/=6,c%=1,[c*360,a*100,l*100]};d.hsl.hcg=function(e){let t=e[1]/100,n=e[2]/100,r=n<.5?2*t*n:2*t*(1-n),s=0;return r<1&&(s=(n-.5*r)/(1-r)),[e[0],r*100,s*100]};d.hsv.hcg=function(e){let t=e[1]/100,n=e[2]/100,r=t*n,s=0;return r<1&&(s=(n-r)/(1-r)),[e[0],r*100,s*100]};d.hcg.rgb=function(e){let t=e[0]/360,n=e[1]/100,r=e[2]/100;if(n===0)return[r*255,r*255,r*255];let s=[0,0,0],o=t%1*6,a=o%1,l=1-a,c=0;switch(Math.floor(o)){case 0:s[0]=1,s[1]=a,s[2]=0;break;case 1:s[0]=l,s[1]=1,s[2]=0;break;case 2:s[0]=0,s[1]=1,s[2]=a;break;case 3:s[0]=0,s[1]=l,s[2]=1;break;case 4:s[0]=a,s[1]=0,s[2]=1;break;default:s[0]=1,s[1]=0,s[2]=l}return c=(1-n)*r,[(n*s[0]+c)*255,(n*s[1]+c)*255,(n*s[2]+c)*255]};d.hcg.hsv=function(e){let t=e[1]/100,n=e[2]/100,r=t+n*(1-t),s=0;return r>0&&(s=t/r),[e[0],s*100,r*100]};d.hcg.hsl=function(e){let t=e[1]/100,r=e[2]/100*(1-t)+.5*t,s=0;return r>0&&r<.5?s=t/(2*r):r>=.5&&r<1&&(s=t/(2*(1-r))),[e[0],s*100,r*100]};d.hcg.hwb=function(e){let t=e[1]/100,n=e[2]/100,r=t+n*(1-t);return[e[0],(r-t)*100,(1-r)*100]};d.hwb.hcg=function(e){let t=e[1]/100,n=e[2]/100,r=1-n,s=r-t,o=0;return s<1&&(o=(r-s)/(1-s)),[e[0],s*100,o*100]};d.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]};d.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]};d.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]};d.gray.hsl=function(e){return[0,0,e[0]]};d.gray.hsv=d.gray.hsl;d.gray.hwb=function(e){return[0,100,e[0]]};d.gray.cmyk=function(e){return[0,0,0,e[0]]};d.gray.lab=function(e){return[e[0],0,0]};d.gray.hex=function(e){let t=Math.round(e[0]/100*255)&255,r=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(r.length)+r};d.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}});var ot=v(($r,st)=>{var Q=ye();function En(){let e={},t=Object.keys(Q);for(let n=t.length,r=0;r<n;r++)e[t[r]]={distance:-1,parent:null};return e}i(En,"buildGraph");function jn(e){let t=En(),n=[e];for(t[e].distance=0;n.length;){let r=n.pop(),s=Object.keys(Q[r]);for(let o=s.length,a=0;a<o;a++){let l=s[a],c=t[l];c.distance===-1&&(c.distance=t[r].distance+1,c.parent=r,n.unshift(l))}}return t}i(jn,"deriveBFS");function Dn(e,t){return function(n){return t(e(n))}}i(Dn,"link");function _n(e,t){let n=[t[e].parent,e],r=Q[t[e].parent][e],s=t[e].parent;for(;t[s].parent;)n.unshift(t[s].parent),r=Dn(Q[t[s].parent][s],r),s=t[s].parent;return r.conversion=n,r}i(_n,"wrapConversion");st.exports=function(e){let t=jn(e),n={},r=Object.keys(t);for(let s=r.length,o=0;o<s;o++){let a=r[o];t[a].parent!==null&&(n[a]=_n(a,t))}return n}});var it=v((Ur,at)=>{var he=ye(),$n=ot(),F={},Un=Object.keys(he);function Nn(e){let t=i(function(...n){let r=n[0];return r==null?r:(r.length>1&&(n=r),e(n))},"wrappedFn");return"conversion"in e&&(t.conversion=e.conversion),t}i(Nn,"wrapRaw");function Bn(e){let t=i(function(...n){let r=n[0];if(r==null)return r;r.length>1&&(n=r);let s=e(n);if(typeof s=="object")for(let o=s.length,a=0;a<o;a++)s[a]=Math.round(s[a]);return s},"wrappedFn");return"conversion"in e&&(t.conversion=e.conversion),t}i(Bn,"wrapRounded");Un.forEach(e=>{F[e]={},Object.defineProperty(F[e],"channels",{value:he[e].channels}),Object.defineProperty(F[e],"labels",{value:he[e].labels});let t=$n(e);Object.keys(t).forEach(r=>{let s=t[r];F[e][r]=Bn(s),F[e][r].raw=Nn(s)})});at.exports=F});var ft=v((Nr,pt)=>{"use strict";var lt=i((e,t)=>(...n)=>`\x1B[${e(...n)+t}m`,"wrapAnsi16"),ct=i((e,t)=>(...n)=>{let r=e(...n);return`\x1B[${38+t};5;${r}m`},"wrapAnsi256"),dt=i((e,t)=>(...n)=>{let r=e(...n);return`\x1B[${38+t};2;${r[0]};${r[1]};${r[2]}m`},"wrapAnsi16m"),Z=i(e=>e,"ansi2ansi"),ut=i((e,t,n)=>[e,t,n],"rgb2rgb"),O=i((e,t,n)=>{Object.defineProperty(e,t,{get:()=>{let r=n();return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0}),r},enumerable:!0,configurable:!0})},"setLazyProperty"),ge,E=i((e,t,n,r)=>{ge===void 0&&(ge=it());let s=r?10:0,o={};for(let[a,l]of Object.entries(ge)){let c=a==="ansi16"?"ansi":a;a===t?o[c]=e(n,s):typeof l=="object"&&(o[c]=e(l[t],s))}return o},"makeDynamicStyles");function Ln(){let e=new Map,t={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};t.color.gray=t.color.blackBright,t.bgColor.bgGray=t.bgColor.bgBlackBright,t.color.grey=t.color.blackBright,t.bgColor.bgGrey=t.bgColor.bgBlackBright;for(let[n,r]of Object.entries(t)){for(let[s,o]of Object.entries(r))t[s]={open:`\x1B[${o[0]}m`,close:`\x1B[${o[1]}m`},r[s]=t[s],e.set(o[0],o[1]);Object.defineProperty(t,n,{value:r,enumerable:!1})}return Object.defineProperty(t,"codes",{value:e,enumerable:!1}),t.color.close="\x1B[39m",t.bgColor.close="\x1B[49m",O(t.color,"ansi",()=>E(lt,"ansi16",Z,!1)),O(t.color,"ansi256",()=>E(ct,"ansi256",Z,!1)),O(t.color,"ansi16m",()=>E(dt,"rgb",ut,!1)),O(t.bgColor,"ansi",()=>E(lt,"ansi16",Z,!0)),O(t.bgColor,"ansi256",()=>E(ct,"ansi256",Z,!0)),O(t.bgColor,"ansi16m",()=>E(dt,"rgb",ut,!0)),t}i(Ln,"assembleStyles");Object.defineProperty(pt,"exports",{enumerable:!0,get:Ln})});var yt=v((Br,mt)=>{"use strict";mt.exports=(e,t=process.argv)=>{let n=e.startsWith("-")?"":e.length===1?"-":"--",r=t.indexOf(n+e),s=t.indexOf("--");return r!==-1&&(s===-1||r<s)}});var bt=v((Lr,gt)=>{"use strict";var Vn=require("os"),ht=require("tty"),k=yt(),{env:h}=process,I;k("no-color")||k("no-colors")||k("color=false")||k("color=never")?I=0:(k("color")||k("colors")||k("color=true")||k("color=always"))&&(I=1);"FORCE_COLOR"in h&&(h.FORCE_COLOR==="true"?I=1:h.FORCE_COLOR==="false"?I=0:I=h.FORCE_COLOR.length===0?1:Math.min(parseInt(h.FORCE_COLOR,10),3));function be(e){return e===0?!1:{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}i(be,"translateLevel");function ve(e,t){if(I===0)return 0;if(k("color=16m")||k("color=full")||k("color=truecolor"))return 3;if(k("color=256"))return 2;if(e&&!t&&I===void 0)return 0;let n=I||0;if(h.TERM==="dumb")return n;if(process.platform==="win32"){let r=Vn.release().split(".");return Number(r[0])>=10&&Number(r[2])>=10586?Number(r[2])>=14931?3:2:1}if("CI"in h)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE"].some(r=>r in h)||h.CI_NAME==="codeship"?1:n;if("TEAMCITY_VERSION"in h)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(h.TEAMCITY_VERSION)?1:0;if(h.COLORTERM==="truecolor")return 3;if("TERM_PROGRAM"in h){let r=parseInt((h.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(h.TERM_PROGRAM){case"iTerm.app":return r>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(h.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(h.TERM)||"COLORTERM"in h?1:n}i(ve,"supportsColor");function Kn(e){let t=ve(e,e&&e.isTTY);return be(t)}i(Kn,"getSupportLevel");gt.exports={supportsColor:Kn,stdout:be(ve(!0,ht.isatty(1))),stderr:be(ve(!0,ht.isatty(2)))}});var wt=v((Vr,vt)=>{"use strict";var Gn=i((e,t,n)=>{let r=e.indexOf(t);if(r===-1)return e;let s=t.length,o=0,a="";do a+=e.substr(o,r-o)+t+n,o=r+s,r=e.indexOf(t,o);while(r!==-1);return a+=e.substr(o),a},"stringReplaceAll"),zn=i((e,t,n,r)=>{let s=0,o="";do{let a=e[r-1]==="\r";o+=e.substr(s,(a?r-1:r)-s)+t+(a?`\r
`:`
`)+n,s=r+1,r=e.indexOf(`
`,s)}while(r!==-1);return o+=e.substr(s),o},"stringEncaseCRLFWithFirstIndex");vt.exports={stringReplaceAll:Gn,stringEncaseCRLFWithFirstIndex:zn}});var Tt=v((Kr,Pt)=>{"use strict";var Wn=/(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi,Ht=/(?:^|\.)(\w+)(?:\(([^)]*)\))?/g,Yn=/^(['"])((?:\\.|(?!\1)[^\\])*)\1$/,Jn=/\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi,Xn=new Map([["n",`
`],["r","\r"],["t","	"],["b","\b"],["f","\f"],["v","\v"],["0","\0"],["\\","\\"],["e","\x1B"],["a","\x07"]]);function xt(e){let t=e[0]==="u",n=e[1]==="{";return t&&!n&&e.length===5||e[0]==="x"&&e.length===3?String.fromCharCode(parseInt(e.slice(1),16)):t&&n?String.fromCodePoint(parseInt(e.slice(2,-1),16)):Xn.get(e)||e}i(xt,"unescape");function Qn(e,t){let n=[],r=t.trim().split(/\s*,\s*/g),s;for(let o of r){let a=Number(o);if(!Number.isNaN(a))n.push(a);else if(s=o.match(Yn))n.push(s[2].replace(Jn,(l,c,u)=>c?xt(c):u));else throw new Error(`Invalid Chalk template style argument: ${o} (in style '${e}')`)}return n}i(Qn,"parseArguments");function Zn(e){Ht.lastIndex=0;let t=[],n;for(;(n=Ht.exec(e))!==null;){let r=n[1];if(n[2]){let s=Qn(r,n[2]);t.push([r].concat(s))}else t.push([r])}return t}i(Zn,"parseStyle");function kt(e,t){let n={};for(let s of t)for(let o of s.styles)n[o[0]]=s.inverse?null:o.slice(1);let r=e;for(let[s,o]of Object.entries(n))if(!!Array.isArray(o)){if(!(s in r))throw new Error(`Unknown Chalk style: ${s}`);r=o.length>0?r[s](...o):r[s]}return r}i(kt,"buildStyle");Pt.exports=(e,t)=>{let n=[],r=[],s=[];if(t.replace(Wn,(o,a,l,c,u,y)=>{if(a)s.push(xt(a));else if(c){let p=s.join("");s=[],r.push(n.length===0?p:kt(e,n)(p)),n.push({inverse:l,styles:Zn(c)})}else if(u){if(n.length===0)throw new Error("Found extraneous } in Chalk template literal");r.push(kt(e,n)(s.join(""))),s=[],n.pop()}else s.push(y)}),r.push(s.join("")),n.length>0){let o=`Chalk template literal is missing ${n.length} closing bracket${n.length===1?"":"s"} (\`}\`)`;throw new Error(o)}return r.join("")}});var qt=v((Gr,Mt)=>{"use strict";var L=ft(),{stdout:He,stderr:ke}=bt(),{stringReplaceAll:er,stringEncaseCRLFWithFirstIndex:tr}=wt(),{isArray:ee}=Array,St=["ansi","ansi","ansi256","ansi16m"],j=Object.create(null),nr=i((e,t={})=>{if(t.level&&!(Number.isInteger(t.level)&&t.level>=0&&t.level<=3))throw new Error("The `level` option should be an integer from 0 to 3");let n=He?He.level:0;e.level=t.level===void 0?n:t.level},"applyOptions"),xe=class{constructor(t){return Rt(t)}};i(xe,"ChalkClass");var Rt=i(e=>{let t={};return nr(t,e),t.template=(...n)=>It(t.template,...n),Object.setPrototypeOf(t,te.prototype),Object.setPrototypeOf(t.template,t),t.template.constructor=()=>{throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.")},t.template.Instance=xe,t.template},"chalkFactory");function te(e){return Rt(e)}i(te,"Chalk");for(let[e,t]of Object.entries(L))j[e]={get(){let n=ne(this,Pe(t.open,t.close,this._styler),this._isEmpty);return Object.defineProperty(this,e,{value:n}),n}};j.visible={get(){let e=ne(this,this._styler,!0);return Object.defineProperty(this,"visible",{value:e}),e}};var Ct=["rgb","hex","keyword","hsl","hsv","hwb","ansi","ansi256"];for(let e of Ct)j[e]={get(){let{level:t}=this;return function(...n){let r=Pe(L.color[St[t]][e](...n),L.color.close,this._styler);return ne(this,r,this._isEmpty)}}};for(let e of Ct){let t="bg"+e[0].toUpperCase()+e.slice(1);j[t]={get(){let{level:n}=this;return function(...r){let s=Pe(L.bgColor[St[n]][e](...r),L.bgColor.close,this._styler);return ne(this,s,this._isEmpty)}}}}var rr=Object.defineProperties(()=>{},{...j,level:{enumerable:!0,get(){return this._generator.level},set(e){this._generator.level=e}}}),Pe=i((e,t,n)=>{let r,s;return n===void 0?(r=e,s=t):(r=n.openAll+e,s=t+n.closeAll),{open:e,close:t,openAll:r,closeAll:s,parent:n}},"createStyler"),ne=i((e,t,n)=>{let r=i((...s)=>ee(s[0])&&ee(s[0].raw)?At(r,It(r,...s)):At(r,s.length===1?""+s[0]:s.join(" ")),"builder");return Object.setPrototypeOf(r,rr),r._generator=e,r._styler=t,r._isEmpty=n,r},"createBuilder"),At=i((e,t)=>{if(e.level<=0||!t)return e._isEmpty?"":t;let n=e._styler;if(n===void 0)return t;let{openAll:r,closeAll:s}=n;if(t.indexOf("\x1B")!==-1)for(;n!==void 0;)t=er(t,n.close,n.open),n=n.parent;let o=t.indexOf(`
`);return o!==-1&&(t=tr(t,s,r,o)),r+t+s},"applyStyle"),we,It=i((e,...t)=>{let[n]=t;if(!ee(n)||!ee(n.raw))return t.join(" ");let r=t.slice(1),s=[n.raw[0]];for(let o=1;o<n.length;o++)s.push(String(r[o-1]).replace(/[{}\\]/g,"\\$&"),String(n.raw[o]));return we===void 0&&(we=Tt()),we(e,s.join(""))},"chalkTag");Object.defineProperties(te.prototype,j);var re=te();re.supportsColor=He;re.stderr=te({level:ke?ke.level:0});re.stderr.supportsColor=ke;Mt.exports=re});var ln=v((Ms,an)=>{"use strict";var ar=/at\s{1}(?:.*\.)?plugin\s{1}.*\n\s*(.*)/,ir=/(\w*(\.\w*)*)\..*/;an.exports=i(function(t){let n=t.match(ar);return n?n[1].split(/[/\\]/).slice(-1)[0].match(ir)[1]:"anonymous"},"extractPluginName")});var dn=v((qs,cn)=>{"use strict";var lr=ln(),cr=0;function Oe(e,t={}){let n=!1;if(typeof e.default!="undefined"&&(e=e.default),typeof e!="function")throw new TypeError(`fastify-plugin expects a function, instead got a '${typeof e}'`);e[Symbol.for("skip-override")]=!0;let r=t&&t.name||dr(e);if(typeof t=="string"&&(t={fastify:t}),typeof t!="object"||Array.isArray(t)||t===null)throw new TypeError("The options object should be an object");if(t.fastify!==void 0&&typeof t.fastify!="string")throw new TypeError(`fastify-plugin expects a version string, instead got '${typeof t.fastify}'`);t.name||(n=!0,t.name=r+"-auto-"+cr++),e[Symbol.for("fastify.display-name")]=t.name,e[Symbol.for("plugin-meta")]=t,e.default||(e.default=e);let s=ur(t.name);return!n&&!e[s]&&(e[s]=e),e}i(Oe,"plugin");function dr(e){if(e.name.length>0)return e.name;try{throw new Error("anonymous function")}catch(t){return lr(t.stack)}}i(dr,"checkName");function ur(e){return e.replace(/-(.)/g,function(n,r){return r.toUpperCase()})}i(ur,"toCamelCase");Oe.default=Oe;cn.exports=Oe});var fn=f(require("path")),mn=f(require("fastify")),yn=f(require("@fastify/static")),hn=f(require("open")),gn=require("portfinder");var je=f(q());function De(e,t){return t&&typeof e!="function"?(0,je.depend)(e,t):e}i(De,"defineHooks");var _e=De(()=>({}));var $e=f(q());function Ue(e,t){return t&&typeof e!="function"?(0,$e.depend)(e,t):e}i(Ue,"defineController");var $=f(require("fs")),U=f(require("path")),Dt=require("os"),_t=require("child_process");var W=[{name:"dir",message:"Directory name (create new)",type:"input"},{name:"server",message:"Server engine",type:"list",choices:[{name:"Fastify (5x faster)",value:"fastify"},{name:"Express",value:"express"}],default:"fastify"},{name:"client",message:"Client framework",choices:[{name:"Next.js (React)",value:"next"},{name:"Nuxt.js (Vue)",value:"nuxt"},{name:"Sapper (Svelte)",value:"sapper"}],type:"list",default:"next"},{name:"building",message:"Building mode",type:"list",choices:[{name:"Static (export)",value:"static"},{name:"Basic (build)",value:"basic"}],default:"static",when:e=>e.client==="next"||e.client==="sapper"},{name:"mode",message:"Rendering mode",type:"list",choices:[{name:"Single Page App",value:"spa"},{name:"Universal (SSR / SSG)",value:"universal"}],default:"spa",when:e=>e.client==="nuxt"},{name:"target",message:"Deployment target",type:"list",choices:[{name:"Static (JAMStack hosting)",value:"static"},{name:"Server (Node.js hosting)",value:"server"}],default:"static",when:e=>e.client==="nuxt"},{name:"aspida",message:"HTTP client of aspida",choices:[{name:"axios",value:"axios"},{name:"fetch",value:"fetch"}],type:"list",default:"axios"},{name:"reactHooks",message:"React Hooks for data fetching",type:"list",choices:[{name:"SWR",value:"swr"},{name:"React Query",value:"query"},{name:"None",value:"none"}],default:"swr",when:e=>e.client==="next"},{name:"daemon",message:"Daemon process manager",choices:[{name:"PM2",value:"pm2"},{name:"None",value:"none"}],type:"list",default:"pm2"},{name:"orm",message:"O/R mapping tool",choices:[{name:"Prisma (recommended)",value:"prisma"},{name:"TypeORM",value:"typeorm"},{name:"None",value:"none"}],type:"list",default:"prisma"},{name:"db",message:e=>{var t,n;return`Database type of ${(n={prisma:"Prisma",typeorm:"TypeORM"}[(t=e.orm)!=null?t:""])!=null?n:""}`},choices:[{name:"SQLite",value:"sqlite",disabled:e=>e.orm==="typeorm"?{en:"Preparing SQLite support for TypeORM"}:null},{name:"MySQL",value:"mysql"},{name:"PostgreSQL",value:"postgresql"}],type:"list",default:"sqlite",when:e=>e.orm!=="none"},{name:"skipDbChecks",message:"Skip DB connection checks",choices:[{name:"No",value:"false"},{name:"Yes",value:"true"}],type:"list",default:"false",when:e=>e.orm!=="none"&&e.db!=="sqlite"},...["postgresql","mysql"].flatMap(e=>[["Host","HOST"],["Port","PORT"],["Name","DATABASE"],["User","USERNAME"],["Pass","PASSWORD"]].map(([t,n])=>({name:`${e}Db${t}`,message:r=>r.orm==="prisma"?`dev DB ${n}: server/prisma/.env API_DATABASE_URL (${pe({...r,[`${e}Db${t}`]:r[`${e}Db${t}`]||"HERE",[`${e}DbPass`]:r[`${e}DbPass`]?"***":t==="Pass"?"HERE":""})}) =`:`dev DB: server/.env TYEPORM_${n} =`,type:"input",default:(()=>{switch(t){case"Host":return"localhost";case"Port":return e==="mysql"?"3306":"5432";default:return}})(),valid:r=>{if(r.skipDbChecks==="true")return!0;let s=r[`${e}Db${t}`];switch(t){case"Port":return/[1-9]\d*/.test(s)&&1<=+s&&+s<=65353;case"Pass":return!0;default:return Boolean(s)}},when:r=>r.orm!=="none"&&r.db===e}))),{name:"sqliteDbFile",message:"server/prisma/.env DATABASE_FILE=",type:"input",default:"./dev.db",when:e=>e.orm!=="none"&&e.db==="sqlite",valid:e=>{var t;return e.skipDbChecks==="true"||((t=e.sqliteDbFile)!=null?t:"")!==""}},{name:"testing",message:"Testing framework",choices:[{name:"Jest",value:"jest"},{name:"None",value:"none"}],type:"list",default:"jest"},{name:"pm",message:"Package manager",choices:[{name:"Npm",value:"npm"},{name:"Yarn",value:"yarn"}],type:"list",default:"npm"},{name:"ci",message:"CI config",choices:[{name:"GitHub Actions",value:"actions"},{name:"None",value:"none"}],type:"list",default:"actions"},{name:"deployServer",message:"API server hosting",choices:[{name:"Dedicated server",value:"pm2",disabled:e=>e.orm==="typeorm"?{en:"Preparing to support TypeORM"}:e.daemon!=="pm2"?{en:"Select **PM2** for process manager"}:e.ci!=="actions"?{en:"Select **GitHub Actions** for CI"}:null,notes:e=>{var t;return[{severity:"info",text:{en:["This uses [PM2](https://pm2.io) to deploy to your dedicated servers, cloud servers or VM instances.","","Ensure the server is installed `git` and `node`.","","### GitHub Actions Secrets","","Add following secrets.","","- **API_BASE_PATH**: Your API basepath. e.g. `/api`",`- **API_DATABASE_URL**: ${{sqlite:"Production URL for SQLite. e.g. `file:///mnt/efs-data/db.sqlite`",mysql:"Production URL for MySQL. e.g. `mysql://mysql-instance1.123456789012.us-east-1.rds.amazonaws.com:3306`",postgresql:"Production URL for Postgres. e.g. `postgres://myinstance.123456789012.us-east-1.rds.amazonaws.com:5432`"}[(t=e.db)!=null?t:""]}.`,"- **API_DEPLOY_HOST**: Dedicated server host. e.g. `ec2-public-ipv4-address.compute-1.amazonaws.com`","- **API_DEPLOY_USER**: SSH username. e.g. `ci`","- **API_DEPLOY_SSH_KEY**: SSH private key that can connect to the above host. e.g.","  a. Run `ssh-keygen -t rsa -b 4096 -m PEM -f frourio-ci.key` on your local machine.","  b. Copy contents of `frourio-ci.key` and paste it to this secrets value.","  c. Send `frourio-ci.key.pub` to your host machine, and append it to `~/.ssh/known_hosts` on remote host.","- **API_UPLOAD_DIR**: The directory to upload user contents, for example icons. e.g. `/mnt/efs-1/upload`, `/srv/upload`","  - In default sample, it is used to save uploaded icons."].join(`
`)}}]}},{name:"Serverless",value:"serverless",disabled:e=>e.server==="fastify"?{en:"Fastify does not benefit for serverless environment"}:e.orm==="typeorm"?{en:"Preparing to support TypeORM"}:e.orm==="none"?{en:"Preparing to support no ORM"}:e.ci!=="actions"?{en:"Select **GitHub Actions** for CI"}:null},{name:"None",value:"none"}],type:"list",default:"none"},{name:"deployBranch",message:"Branch name to deploy",type:"input",default:"main"},{name:"serverSourcePath",message:"Path to place server source",type:"input",default:"/opt/apiserver",when:e=>e.deployServer==="pm2",notes:[{severity:"info",text:{en:["API_DEPLOY_USER"].join(`
`)}}]},{name:"staticHosting",message:"Static hosting service",choices:[{name:"GitHub Pages",value:"pages",disabled:e=>e.ci!=="actions"?{en:"Select **GitHub Actions** for CI"}:null,notes:[{severity:"info",text:{en:["### GitHub Actions Secrets","","Add following secrets.","","- **API_ORIGIN**: API origin. e.g. `https://api.my-frourio-app.example`","- **API_BASE_PATH**: API basepath. e.g. `/api`","- _Optional_ **GH_PAGES_BASE_PATH**: Client hosting basepath.","  - If omitted, GitHub repository name will be used. This is because GitHub hosts Pages at _github-username_.github.io/_repository-name_ with default settings.","  - You can also use custom domain. When doing so, it is needed to use that basename. Set this `/` to host your client from root routing."].join(`
`)}}]},{name:"Vercel",value:"vercel",notes:e=>[{severity:"info",text:{en:["### Deploy to Vercel","","1. Visit [vercel.com](https://vercel.com) and create new project.","2. Set **BUILD COMMAND** to `"+e.pm+" run build:client`.","3. Add environment variables **API_BASE_PATH** and **API_ORIGIN**."].join(`
`)}}]},{name:"Netlify",value:"netlify",notes:e=>[{severity:"info",text:{en:["### Deploy to Netlify","","1. Visit [app.netlify.com](https://app.netlify.com) and create new project.","2. Go to **Site Settings** > **Build & Deploy**","  a. Set **Repository** to your remote repository","  b. Set **Build command** to `"+e.pm+" run build:client`","  c. Set **Publish directory** to `out/`","3. Go to **Site Settings** > **Build & Deploy** > **Environment**","  a. Add environment variables **API_ORIGIN** and **API_BASE_PATH**."].join(`
`)}}]},{name:"None",value:"none"}],type:"list",default:"pages"},{name:"serverless",message:"Serverless service",when:e=>e.deployServer==="serverless",choices:[{name:"AWS Lambda",value:"lambda",disabled:e=>e.ci!=="actions"?{en:"Select **GitHub Actions** for CI"}:null,notes:()=>[{severity:"warn",text:{en:["Little difficult option for beginners.","You can find more concrete example [here](https://github.com/LumaKernel/frourio-sample-1/tree/master/infra).","","To develop serverless applications, you should consider how huge are the modules and bundled files.","Please note that AWS Lambda has [the size limit](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html) **250MB**."].join(`
`)}},{severity:"info",text:{en:["### Deploy to AWS Lambda","","At least, you should prepare following for deploying to AWS Lambda.","","- [Lambda function](https://aws.amazon.com/lambda/) to respond to user requests.","  - Set this Lambda's name to GitHub Actions Secrets **LAMBDA_FUNCTION_NAME_SERVER**","- [Lambda function](https://aws.amazon.com/lambda/) to run migrations.","  - Set this Lambda's name to GitHub Actions Secrets **LAMBDA_FUNCTION_NAME_MIGRATION**","  - NOTE: Recommended to set longer time limit.","- [Amazon S3](https://aws.amazon.com/s3/) to upload deployment artifacts like built bundle scripts and _node\\_modules_.","  - Set this S3's bucket name to GitHub Actions Secrets **S3_BUCKET**","  - _Optional_: To specify the S3 key prefix, also add **S3_PREFIX** to secrets. e.g. `deployments/`","  - To elaborate, the key `${S3_BUCKET}/${S3_PREFIX}deployment_server.zip` is used to store the data."].join(`
`)}}]}],type:"list",default:"lambda"}],z=i((e,t=W)=>{if(t===null)return t;if(Array.isArray(t))return t.map(n=>z(e,n)).filter(n=>n!==void 0);if(typeof t=="object"){let n={};for(let r of Object.getOwnPropertyNames(t))t[r]!==void 0&&(n[r]=z(e,t[r]));return n.when===!1?void 0:n}return typeof t=="function"?t(e):t},"calculatePrompts"),Ne=i(()=>{let e={};return W.forEach(t=>e[t.name]=t.default),e},"getAllDefaultAnswers"),Be=i(e=>{let t={...e},n=Ne();for(let r in n)t[r]===n[r]&&delete t[r];return t},"omitDefaults"),Le=i(e=>{let t=Ne();return z({...t,...e})},"initPrompts"),Ve=i(e=>{let t={...e},n=Object.create(null);return z(e).forEach(s=>n[s.name]=!0),W.forEach(s=>{s.name in n||(t[s.name]=void 0)}),t},"removeUnnecessary"),Ke=i(e=>{let t={...e};return W.forEach(n=>{n.name in t||(t[n.name]=void 0)}),t},"addAllUndefined");var ue=i(e=>{let t={};return e.db&&e.db!=="none"&&e.db!=="sqlite"&&["Host","Port","Name","User","Pass"].forEach(n=>{t[`db${n}`]=e[`${e.db}Db${n}`]||""}),t},"getCommonDbInfo"),pe=i(e=>{let t=ue(e);if(e.db&&e.db!=="none")return e.db==="sqlite"?`file:${e.sqliteDbFile}`:`${e.db}://${t.dbUser}:${t.dbPass}@${t.dbHost}:${t.dbPort}/${t.dbName}`},"getPrismaDbUrl");var x=f(require("fs")),P=f(require("path")),Ye=f(require("ejs")),Je=f(require("is-binary-path"));var me=f(require("assert"));var Y=f(require("assert")),qn=["@dep","@dev-dep","@server-dev-dep","@server-dep"],ze=i(e=>qn.indexOf(e)>-1,"isDepKey"),We=i(()=>{let e=Ge();return(0,Y.default)(!("devDependencies"in e)),(0,Y.default)(!("peerDependencies"in e)),e.dependencies},"getPackageVersions"),Fn=i(e=>{let t=Object.create(null);return e.forEach(n=>{let r=n.match(/^(@?[^@]+)(?:@(.*))?$/);t[r[1]]=r[2]?`@${r[2]}`:""}),Object.entries(t).map(([n,r])=>`${n}${r}`)},"strUniq"),fe=i((e,t,n)=>Fn(t).sort().map(r=>{let s=r,o=null,a=r.match(/^(@?[^@]+)@(.*)$/);return a&&(s=a[1],o=a[2]),(0,Y.default)(s in e,`${s} is not pre-defined.`),`${n}${JSON.stringify(s)}: ${JSON.stringify(o||e[s])}`}).join(`,
`),"convertListToJson");var J=i(e=>({...e,typeormDb:e.db==="postgresql"?"postgres":e.db,...ue(e),prismaDbUrl:pe(e)}),"answersToTemplateContext");var Xe=i(async(e,t,n)=>{var y;let r={"@dep":[],"@dev-dep":[],"@server-dev-dep":[],"@server-dep":[]},s=(y=n!=null?n:e.dir)!=null?y:"",o=Ke(Ve(J(e))),a=i(async(p,g)=>{let b=P.default.join(s,p),m=P.default.join(s,g);await x.default.promises.rename(b,m)},"rename"),l=i(async(p,g)=>{let b=await x.default.promises.readdir(p);try{await x.default.promises.mkdir(g)}catch{}await Promise.all(b.map(async m=>{let w=P.default.resolve(p,m);if(!m.startsWith("@"))if((await x.default.promises.stat(w)).isDirectory())await l(P.default.resolve(p,m),P.default.resolve(g,m));else{let C=await x.default.promises.readFile(w),T=(0,Je.default)(m);try{let G=T?C:Ye.default.render(C.toString("utf-8").replace(/\r/g,""),o);await x.default.promises.writeFile(P.default.resolve(g,m),G)}catch(G){throw console.error(G),console.error(`Error occured while processing ${w}`),G}}})),await Promise.all(b.map(async m=>{if(!m.startsWith("@"))return;let w=P.default.resolve(p,m);if((await x.default.promises.stat(w)).isDirectory()){let[C,T]=m.slice(1).split("=");if(o[C]!==T)return;await l(P.default.resolve(p,m),g)}else if(m.endsWith("dep")){let C=(await x.default.promises.readFile(w)).toString().split(/[\n\r]+/).map(T=>T.trim()).filter(T=>T&&!T.startsWith("#"));(0,me.default)(ze(m),`${m} is not expected dep key.`),r[m]=[...r[m],...C]}else throw new Error("Unreachable: Unknown special filename.")}))},"walk");await l(P.default.resolve(t,"templates"),s);let c=We(),u=i(async(p,g,b)=>{let m=P.default.resolve(s,p),w=(await x.default.promises.readFile(m)).toString(),C=`
  }
}
`;(0,me.default)(w.endsWith(C),"Template package.json ending unexpected.");let T=w.slice(0,-C.length)+`
  },
  "dependencies": {
${fe(c,r[g],"    ")}
  },
  "devDependencies": {
${fe(c,r[b],"    ")}
  }
}
`;await x.default.promises.writeFile(m,T)},"setupPackageJson");return await Promise.all([u("package.json","@dep","@dev-dep"),u("server/package.json","@server-dep","@server-dev-dep"),a("gitignore",".gitignore")]),o},"generate");var Qe="waiting",X=i(()=>Qe,"getStatus"),Ze=i(e=>{Qe=e},"setStatus");var se=f(require("path")),Ot=require("path"),Te=require("child_process"),A=f(qt()),Et=f(require("fs")),oe=f(require("real-executable-path")),Ft=i(async(e,t,n)=>{let r=await(0,oe.default)(t);await new Promise((s,o)=>{var l,c;let a=(0,Te.spawn)(r,["install"],{stdio:["inherit","pipe","pipe"],cwd:e,env:{FORCE_COLOR:"true",npm_config_color:"always",npm_config_progress:"true",...process.env}});(l=a.stdio[1])==null||l.on("data",n.write.bind(n)),(c=a.stdio[2])==null||c.on("data",n.write.bind(n)),a.once("exit",s),a.once("error",o)})},"npmInstall"),jt=i(async(e,t)=>{var u,y;let n=se.default.resolve((u=e.dir)!=null?u:"./new-frourio-app"),r=await(0,oe.default)((y=e.pm)!=null?y:"npm"),s=await(0,oe.default)("git");await new Promise((p,g)=>{var m,w;let b=(0,Te.spawn)(s,["init"],{stdio:["inherit","pipe","pipe"],cwd:n});(m=b.stdio[1])==null||m.on("data",t.write.bind(t)),(w=b.stdio[2])==null||w.on("data",t.write.bind(t)),b.once("exit",p),b.once("error",g)}),await Et.default.promises.writeFile(se.default.resolve(n,".git/HEAD"),`ref: refs/heads/${e.deployBranch}`),await Ft(n,r,t),await Ft(se.default.resolve(n,"server"),r,t);let o=n!==process.cwd(),a=(0,Ot.relative)(process.cwd(),n),l=o?A.default`\n\t{cyan cd ${a}}\n`:"",c=`${e.pm}${e.pm==="npm"?" run":""}`;t.write(A.default`\n🎉  {bold Successfully created project} {cyan ${n}}\n`),t.write(A.default`  {bold To get started:}`),e.orm!=="none"&&e.db!=="sqlite"&&t.write(A.default`\t{cyan (start ${e.db} server yourself)}`),t.write(A.default`${l}\t{cyan ${c} dev}\n`),t.write(A.default`  {bold To build & start for production:}`),e.orm!=="none"&&e.db&&t.write(A.default`\t{cyan (start ${e.db} server yourself)}`),t.write(A.default`${l}\t{cyan ${c} build}`),t.write(A.default`\t{cyan ${c} start}\n`)},"completed");var Ae=require("portfinder"),V,D=i(()=>(V=V!=null?V:(0,Ae.getPortPromise)({port:1e4+Math.floor(Math.random()*5e4)}),V),"getServerPort"),K,_=i(()=>(K=K!=null?K:(0,Ae.getPortPromise)({port:8e3}),K),"getClientPort");var $t=f(require("real-executable-path"));var Se=f(require("fs")),ae=i(async e=>{let[t,n]=await Promise.all([Se.default.promises.stat(e).catch(()=>({isDirectory:()=>!1,isFile:()=>!1})),Se.default.promises.readdir(e).then(r=>r.length===0).catch(()=>!1)]);return{isDirectory:t.isDirectory(),isFile:t.isFile(),isEmpty:n}},"getPathStatus"),ie=i(e=>e.isFile?"The file you specified already exists.":e.isDirectory&&!e.isEmpty?"The directoy you specified already exists and not empty.":null,"canContinueOnPath");var Re=i(e=>e[0].toUpperCase()+e.slice(1),"capitailze");var Ie=U.default.join((0,Dt.homedir)(),".frourio"),Me=U.default.join(Ie,"create-frourio-app.json"),S,Ce=[{ver:2,handler:({answers:{front:e,...t}})=>({ver:2,answers:{...t,client:e}})},{ver:3,handler:({answers:{dbHost:e,dbUser:t,dbPass:n,dbPort:r,dbFile:s,...o}})=>({ver:3,answers:{...o,sqliteDbFile:s}})}],sr=["dbHost","dbUser","dbPass","dbUser","dbPort"],Ut=[{when:e=>"front"in e,warn:()=>'Use "client" instead of "front".',handler:({front:e,...t})=>({...t,client:e})},...sr.map(e=>({when:t=>e in t,warn:t=>`Use "${t.db}${Re(e)}" instead of "${e}".`,handler:({[e]:t,db:n,...r})=>({...r,db:n,[`${n}${Re(e)}`]:t})})),{when:e=>"dbFile"in e,warn:()=>'Use "sqliteDbFile" instead of "dbFile".',handler:({dbFile:e,...t})=>({...t,sqliteDbFile:e})}];try{let e=JSON.parse($.default.readFileSync(Me,"utf8"));S=e.ver>Ce.length?e:Ce.slice(Ce.findIndex(t=>t.ver===e.ver+1)).reduce((t,n)=>n.handler(t),e)}catch{S={ver:3,answers:{}}}var qe=i(e=>Le(e).reduce((t,n)=>{var r;return{...t,[n.name]:(r=e[n.name])!=null?r:n.default}},{}),"genAllAnswers"),or=i(async(e,t)=>{var a,l;Ze("installing");let n=qe(e),r=(a=n.dir)!=null?a:"";await Xe({...n,clientPort:await _(),serverPort:await D()},U.default.resolve(__dirname,"..")),await jt(n,t);let s=await(0,$t.default)((l=e.pm)!=null?l:"npm"),o=i(c=>new Promise((u,y)=>{var g,b;let p=(0,_t.spawn)(s,["run","--color",c],{cwd:U.default.resolve(r),stdio:["inherit","pipe","pipe"],env:{FORCE_COLOR:"true",npm_config_color:"always",npm_config_progress:"true",...process.env}});(g=p.stdio[1])==null||g.on("data",t.write.bind(t)),(b=p.stdio[2])==null||b.on("data",t.write.bind(t)),p.once("close",u),p.once("error",y)}),"npmRun");await o("generate"),await o("lint:fix"),e.skipDbChecks!=="true"&&(e.orm==="prisma"?await o("migrate:dev"):e.orm==="typeorm"&&await o("migration:run")),o("dev"),delete S.answers.dir,delete S.answers.mysqlDbPass,delete S.answers.postgresqlDbPass,await $.default.promises.writeFile(Me,JSON.stringify(S),"utf8")},"installApp"),Nt=i(e=>({dir:e,...S.answers}),"getAnswers"),le=i(async(e,t)=>{S={...S,answers:{...Be(e),dir:void 0,mysqlDbPass:void 0,postgresqlDbPass:void 0}};let n=ie(await ae(U.default.resolve(process.cwd(),e.dir||"")));if(n!==null)throw new Error(n);return $.default.existsSync(Ie)||await $.default.promises.mkdir(Ie),await $.default.promises.writeFile(Me,JSON.stringify(S),"utf8"),await or(e,t)},"updateAnswers");var Bt=f(require("stream")),Lt=f(require("axios"));var Vt=f(require("open")),Kt=Ue(({appendLogging:e,clientReady:t})=>({get:({dir:n})=>({status:200,body:Nt(n)}),patch:({body:n})=>{if(X()!=="waiting")return{status:204};let r=new Bt.default.Writable({write(s,o,a){e(s),process.stdout.write(s,l=>a(l))}});return le(n,r).then(async()=>{let s=await _(),o=await D();for(let a=0;a<600;a++){await new Promise(l=>setTimeout(l,1e3));try{if((await Lt.default.create({baseURL:`http://localhost:${o}/api`}).get("tasks")).status===200){t();let u=await(0,Vt.default)(`http://localhost:${s}`);u.on("error",()=>{console.log(`open http://localhost:${s} in the browser`)}),u.on("close",()=>{console.log(`open http://localhost:${s} in the browser`)});break}}catch{}}}),{status:204}}}));var Wt=f(require("mariadb")),Yt=require("pg");var Gt=f(q());function zt(e,t){return t&&typeof e!="function"?(0,Gt.depend)(e,t):e}i(zt,"defineController");var Jt=zt(()=>({post:async({body:e})=>{let t=qe(e);if(t.skipDbChecks==="true")return{status:200,body:{enabled:!0}};if(t.orm==="none"||t.db==="sqlite")return{status:200,body:{enabled:!0}};let n=J({...t,serverPort:0,clientPort:0});if(n.dbHost!=="127.0.0.1"&&n.dbHost!=="localhost")return{status:200,body:{enabled:!1,err:'To check db connection, "127.0.0.1" and "localhost" are only allowed for host name.'}};try{let r={host:n.dbHost,port:+`${n.dbPort}`,user:n.dbUser,password:n.dbPass};if(t.db==="mysql"){let s=await Wt.default.createConnection({...r,allowPublicKeyRetrieval:!0});await s.query(`CREATE DATABASE IF NOT EXISTS ${n.dbName}`),await s.end()}else{let s=new Yt.Client({...r,database:"postgres"});await s.connect(),(await s.query("SELECT datname FROM pg_database")).rows.every(a=>a.datname!==n.dbName)&&await s.query(`CREATE DATABASE ${n.dbName}`),await s.end()}return{status:200,body:{enabled:!0}}}catch(r){return{status:200,body:{enabled:!1,err:r instanceof Error?r.message:""}}}}}));var Xt=f(q());function Qt(e,t){return t&&typeof e!="function"?(0,Xt.depend)(e,t):e}i(Qt,"defineController");var Zt=f(require("path")),en=Qt(()=>({post:async({body:{path:e}})=>{let t=Zt.default.resolve(process.cwd(),e),n={absPath:t,canContinue:ie(await ae(t))};return{status:200,body:n}}}));var tn=f(q());function nn(e,t){return t&&typeof e!="function"?(0,tn.depend)(e,t):e}i(nn,"defineController");var rn=nn(()=>({get:async()=>({status:200,body:{status:X(),serverPort:await D(),clientPort:await _()}})}));var sn=i(e=>(t,n)=>{let r=e(t);r.headers&&n.headers(r.headers),n.code(r.status).send(r.body)},"methodToHandler"),Fe=i(e=>async(t,n)=>{let r=await e(t);r.headers&&n.headers(r.headers),n.code(r.status).send(r.body)},"asyncMethodToHandler"),on=i((e,t={})=>{var c;let n=(c=t.basePath)!=null?c:"",r=_e(e),s=Kt(e),o=Jt(e),a=en(e),l=rn(e);return e.get(`${n}/answers`,sn(s.get)),e.patch(`${n}/answers`,sn(s.patch)),e.post(`${n}/dbConnection`,Fe(o.post)),e.post(`${n}/localPath`,Fe(a.post)),e.get(`${n}/status`,Fe(l.get)),e},"default");var bn=f(require("@fastify/websocket"));var un=f(dn()),pr=(0,un.default)((e,t,n)=>{e.decorateRequest("dir",{getter:()=>t.dir}),e.decorate("appendLogging",r=>{t.logging.push(r)}),e.decorate("clientReady",()=>{t.ready.push("ready")}),n()},{fastify:">=3",name:"fastify-winston-logger"}),pn=pr;var Ee=f(require("stream")),vn=require("commander"),wn=[require][0]("../../package.json"),Hn="my-frourio-app",R=new vn.Command;R.name(`${wn.name}`);R.version(`v${wn.version}`,"-v");R.option("-p, --port <char>","","3000");R.option("--host <char>","","localhost");R.option("--answers <char>");R.argument("[dir]","project directory name",Hn);R.allowExcessArguments(!1);R.parse();var ce=R.opts(),fr=R.args[0]||Hn,N=ce.port,mr=ce.host,yr="/api";(async()=>{if(N=await(0,gn.getPortPromise)({port:N}),ce.answers!==void 0){await le(Ut.reduce((r,s)=>s.when(r)?(console.warn(s.warn(r)),s.handler(r)):r,JSON.parse(ce.answers)),process.stdout);return}let e=new Ee.default.Readable({read(){}}),t=new Ee.default.Readable({read(){}}),n=(0,mn.default)();n.register(yn.default,{root:fn.default.join(__dirname,"../../out")}),await n.register(pn,{dir:fr,logging:e,ready:t}),n.register(bn.default),n.get("/ws/",{websocket:!0},r=>{let s=i(o=>{r.socket.send(o)},"handler");e.on("data",s),r.socket.on("close",()=>{e.off("data",s)})}),n.get("/ws/ready/",{websocket:!0},r=>{let s=i(o=>{String(o)==="ready"&&r.socket.send("ready")},"handler");t.on("data",s),r.socket.on("close",()=>{t.off("data",s)})}),await on(n,{basePath:yr}).listen(N,mr);{let r=await(0,hn.default)(`http://localhost:${N}`);r.on("error",()=>{console.log(`open http://localhost:${N} in the browser`)}),r.on("close",()=>{console.log(`open http://localhost:${N} in the browser`)})}})();
//# sourceMappingURL=data:application/json;base64,
