declare type PromptName = 'dir' | 'server' | 'client' | 'building' | 'mode' | 'target' | 'aspida' | 'reactHooks' | 'pm' | 'daemon' | 'testing' | 'orm' | 'db' | 'skipDbChecks' | 'postgresqlDbHost' | 'postgresqlDbPort' | 'postgresqlDbUser' | 'postgresqlDbPass' | 'postgresqlDbName' | 'mysqlDbHost' | 'mysqlDbPort' | 'mysqlDbUser' | 'mysqlDbPass' | 'mysqlDbName' | 'sqliteDbFile' | 'ci' | 'deployBranch' | 'deployServer' | 'staticHosting' | 'serverless' | 'serverSourcePath' | 'designatedServer';
export declare type Answers = Partial<Record<PromptName, string>>;
export declare type Text = {
    en: string;
};
export declare type Note = {
    severity: 'info' | 'warn' | 'error';
    text: Text;
};
declare type Lazy<T> = T | ((ans: Answers) => T);
declare type RemoveLazy<T> = T extends (ans: Answers) => any ? never : T extends (infer U)[] ? RemoveLazy<U>[] : T extends object ? {
    [key in keyof T]: RemoveLazy<T[key]>;
} : T;
declare type Choice = {
    name: string;
    value: string;
    disabled?: Lazy<null | Text>;
    notes?: Lazy<Note[]>;
};
export declare type Prompt = {
    name: PromptName;
    message: Lazy<string>;
    default?: string;
    when?: Lazy<boolean>;
    valid?: Lazy<boolean>;
} & ({
    type: 'list';
    choices: Choice[];
} | {
    type: 'input';
    notes?: Lazy<Note[]>;
});
export declare type DeterminedPrompt = RemoveLazy<Prompt>;
export declare const cfaPrompts: Prompt[];
export declare const calculatePrompts: (answers: Answers, target?: any) => any;
export declare const getAllDefaultAnswers: () => Answers;
export declare const omitDefaults: (answers: Answers) => Answers;
export declare const initPrompts: (answers: Answers) => DeterminedPrompt[];
export declare const removeUnnecessary: <T extends Partial<Record<PromptName, string>>>(answers: T) => T;
export declare const addAllUndefined: <T extends Partial<Record<PromptName, string>>>(answers: T) => T;
export declare const isAnswersValid: (answers: Answers) => boolean;
export declare type CommonDbInfo = {
    dbHost?: string;
    dbPort?: string;
    dbName?: string;
    dbUser?: string;
    dbPass?: string;
};
export declare const getCommonDbInfo: (answers: Answers) => CommonDbInfo;
export declare const getPrismaDbUrl: (answers: Answers) => string | undefined;
export {};
